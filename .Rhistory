refm_mat = do.call('rbind', temp)
colnames(refm_mat) = c('x', 'y', 'count')
return(refm_mat)
}
refm_hic = cmpfun(refm_hic)
xy_gmap = triangle_tad(tads_gmap, resl = resl)
if(nrow(tadsL2) > 0 )xy_tadsL2 = triangle_tad(tadsL2, resl = resl)
if(nrow(tadsL3) > 0 ) xy_tadsL3 = triangle_tad(tadsL3, resl = resl)
## plot it horizontally
hxy_gmap = transf_tad_horz(xy_gmap)
if(nrow(tadsL2) > 0 ) hxy_tadsL2 = transf_tad_horz(xy_tadsL2)
if(nrow(tadsL3) > 0 )hxy_tadsL3 = transf_tad_horz(xy_tadsL3)
mm = start_bin
MM = end_bin
dat = data.frame(hic_dat)
pdat = subset(dat, n1<=MM & n1 >= mm & n2 <= MM & n2 >= mm)
pdat$count = ifelse(pdat$count >cthr, cthr, pdat$count)
orgPlot <- ggplot(data = pdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high='red', low = 'white') + xlim(min(pdat$n1), max(pdat$n1))
#orgPlot
library(ggplot2)
mm = start_bin
MM = end_bin
dat = data.frame(hic_dat)
pdat = subset(dat, n1<=MM & n1 >= mm & n2 <= MM & n2 >= mm)
pdat$count = ifelse(pdat$count >cthr, cthr, pdat$count)
orgPlot <- ggplot(data = pdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high='red', low = 'white') + xlim(min(pdat$n1), max(pdat$n1))
#orgPlot
orgPlot
hdat = pdat[pdat$n1 <= pdat$n2, ]
hdat[, 1:2] = transf_tad_horz(as.matrix(hdat[, 1:2]))
hdat = hdat[hdat$n2 <= 100, ]
#hdat$count = ifelse(hdat$count > 30, 30, hdat$count)
cols = colorRampPalette(c("white", "red"))(2)
ss = ifelse(resl == 1, 1, 10^6/resl)  ## plot in scale of mb
xlab0 = ifelse(resl == 1, 'bin', 'Mb')
hdat$n1 = (hdat$n1 - as.numeric(as.vector(hic_dat[1, 1])) + 1)/ss
orgPlot <- ggplot(data = hdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high = 'red', low = 'white') + xlim(min(hdat$n1), max(hdat$n1)) +
xlab(xlab0) + ylab("") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
legend.position = 'none') + theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank())
orgPlot
hdat
tail(hdat)
plotdom <- function(hic_obj, index_obj = NULL, hiertads_gmap, chr0 = NULL, start_bin, end_bin, cthr = 20, resl = 10000){
if(class(hic_obj)[1] == 'character') {
message('Read hic_obj...')
hic_file = hic_obj
hic_obj = fread(hic_file)
if(ncol(hic_obj) != 3 & nrow(hic_obj) != ncol(hic_obj)) hic_obj = data.table(read.table(hic_file, header = F))
if(ncol(hic_obj) != 3 & nrow(hic_obj) != ncol(hic_obj)) stop('Wrong dimension of data!')
}
# transfer the n by n matrix to 3-column data table
if(dim(hic_obj)[1] == dim(hic_obj)[2]) hic_obj = data.table(refm_hic(hic_obj))
if(!any(class(hic_obj) == 'data.table')) hic_obj = data.table(hic_obj)
if (ncol(hiertads_gmap) == 4) #if TADs called from multiple chromosomes, assuming the first col should be chr, cut it.
{
if(is.null(chr0)) stop('should provided a selected chromosome')
hiertads_gmap = hiertads_gmap[chr == chr0]
hiertads_gmap = hiertads_gmap[, -1]
}
if(!is.null(index_obj) & class(index_obj)[1] == 'character'){
index_obj = fread(index_obj, select = 1:4)
names(index_obj) = c('chr', 'start', 'end', 'id')
}
names(hiertads_gmap) = c('start', 'end', 'dom_order')
names(hic_obj) = c('n1', 'n2', 'count')
if(!is.null(index_obj)){
index_obj = index_obj[chr == chr0]
id0 = min(index_obj$id)
hic_obj = hic_obj[n1 %in% index_obj$id & n2 %in% index_obj$id]
hic_obj[, 'n1' := n1 - id0 + 1]
hic_obj[, 'n2' := n2 - id0 + 1]
}
tads_gmap = subset(hiertads_gmap, dom_order == 1, select = -dom_order)
tadsL2 = subset(hiertads_gmap, dom_order == 2, select = -dom_order)
tadsL3 = subset(hiertads_gmap, dom_order == 3, select = -dom_order)
## plot tads_gmap (select region)
xy_gmap = triangle_tad(tads_gmap, resl = resl)
if(nrow(tadsL2) > 0 )xy_tadsL2 = triangle_tad(tadsL2, resl = resl)
if(nrow(tadsL3) > 0 ) xy_tadsL3 = triangle_tad(tadsL3, resl = resl)
## plot it horizontally
hxy_gmap = transf_tad_horz(xy_gmap)
if(nrow(tadsL2) > 0 ) hxy_tadsL2 = transf_tad_horz(xy_tadsL2)
if(nrow(tadsL3) > 0 )hxy_tadsL3 = transf_tad_horz(xy_tadsL3)
dat = data.frame(hic_obj)
pdat = subset(dat, n1 <= end_bin & n1 >= start_bin & n2 <= end_bin & n2 >= start_bin)
pdat$count = ifelse(pdat$count > cthr, cthr, pdat$count)
orgPlot <- ggplot(data = pdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high='red', low = 'white') + xlim(min(pdat$n1), max(pdat$n1))
#orgPlot
## plot it in horizontal triangle
hdat = pdat[pdat$n1 <= pdat$n2, ]
hdat[, 1:2] = transf_tad_horz(as.matrix(hdat[, 1:2]))
hdat = hdat[hdat$n2 <= 100, ]
cols = colorRampPalette(c("white", "red"))(2)
ss = ifelse(resl == 1, 1, 10^6/resl)  ## plot in scale of mb
xlab0 = ifelse(resl == 1, 'bin', 'Mb')
#hdat$n1 = (hdat$n1 - as.numeric(as.vector(hic_obj[1, 1])) + 1)/ss
hdat$n1 = (hdat$n1)/ss
orgPlot <- ggplot(data = hdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high = 'red', low = 'white') + xlim(min(hdat$n1), max(hdat$n1)) +
xlab(xlab0) + ylab("") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
legend.position = 'none') + theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank())
#orgPlot
orgWTad_horz <- function(xy, m = start_bin - as.numeric(as.vector(hic_obj[1, 1])) + 1
, M = end_bin - as.numeric(as.vector(hic_obj[1, 1])) + 1){
ind1 = which(xy[, 1]>= m & xy[, 1]<= M)
if(length(ind1) <= 1) return(NULL)
xy = xy[ind1, ]
df = data.frame('xs' = xy[1:(nrow(xy)-1), 1]/ss,
'ys' = xy[1:(nrow(xy)-1), 2],
"xe" = xy[2:nrow(xy), 1]/ss,
"ye" = xy[2:nrow(xy), 2])
return(df)
}
p1 = p2 = p3 = orgPlot
if(!is.null(orgWTad_horz(hxy_gmap))) {
tdat = orgWTad_horz(hxy_gmap)
tdat = tdat[order(tdat$xs), ]
tdat = tdat[tdat$xs <= tdat$xe,]
p1 <- p1 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = tdat, color = 'black')
p2 = p1
}
if(nrow(tadsL2) > 0 ){
if(!is.null(orgWTad_horz(hxy_tadsL2))){
p2 = p2 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = orgWTad_horz(hxy_tadsL2), color = 'black')
p3 = p2
}
}
if(nrow(tadsL3) > 0 ){
if(!is.null(orgWTad_horz(hxy_tadsL3))) {
p3 = p2 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = orgWTad_horz(hxy_tadsL3), color = 'black')
}
}
return(list('p1' = p1, 'p2' = p2, 'p3' = p3))
}
plotdom = cmpfun(plotdom)
plotdom(hic_obj = hic_rao_IMR90_chr15, NULL, res$hierTads, NULL, 5950, 6900, 30 ,10000)
pp = plotdom(hic_obj = hic_rao_IMR90_chr15, NULL, res$hierTads, NULL, 5950, 6900, 30 ,10000)
pp$p2
pp$p1
help(plotdom)
plotdom
pp = plotdom(hic_obj = hic_rao_IMR90_chr15, NULL, res$hierTads, NULL, 5950, 6900, 30 ,10000)
pp$p1
rm(dat)
rm(hdat)
rm(hic_dat)
rm(pp)
pp = plotdom(hic_obj = hic_rao_IMR90_chr15, NULL, res$hierTads, NULL, 5950, 6900, 30 ,10000)
pp$p1
res$hierTads
rm(list=ls())
res = rGMAP(hic_rao_IMR90_chr15, resl = 10 * 1000, dom_order = 2)
names(res)
pp = plotdom(hic_obj = hic_rao_IMR90_chr15, NULL, res$hierTads, NULL, 5950, 6900, 30 ,10000)
plotdom <- function(hic_obj, index_obj = NULL, hiertads_gmap, chr0 = NULL, start_bin, end_bin, cthr = 20, resl = 10000){
if(class(hic_obj)[1] == 'character') {
message('Read hic_obj...')
hic_file = hic_obj
hic_obj = fread(hic_file)
if(ncol(hic_obj) != 3 & nrow(hic_obj) != ncol(hic_obj)) hic_obj = data.table(read.table(hic_file, header = F))
if(ncol(hic_obj) != 3 & nrow(hic_obj) != ncol(hic_obj)) stop('Wrong dimension of data!')
}
# transfer the n by n matrix to 3-column data table
if(dim(hic_obj)[1] == dim(hic_obj)[2]) hic_obj = data.table(refm_hic(hic_obj))
if(!any(class(hic_obj) == 'data.table')) hic_obj = data.table(hic_obj)
if (ncol(hiertads_gmap) == 4) #if TADs called from multiple chromosomes, assuming the first col should be chr, cut it.
{
if(is.null(chr0)) stop('should provided a selected chromosome')
hiertads_gmap = hiertads_gmap[chr == chr0]
hiertads_gmap = hiertads_gmap[, -1]
}
if(!is.null(index_obj) & class(index_obj)[1] == 'character'){
index_obj = fread(index_obj, select = 1:4)
names(index_obj) = c('chr', 'start', 'end', 'id')
}
names(hiertads_gmap) = c('start', 'end', 'dom_order')
names(hic_obj) = c('n1', 'n2', 'count')
if(!is.null(index_obj)){
index_obj = index_obj[chr == chr0]
id0 = min(index_obj$id)
hic_obj = hic_obj[n1 %in% index_obj$id & n2 %in% index_obj$id]
hic_obj[, 'n1' := n1 - id0 + 1]
hic_obj[, 'n2' := n2 - id0 + 1]
}
tads_gmap = subset(hiertads_gmap, dom_order == 1, select = -dom_order)
tadsL2 = subset(hiertads_gmap, dom_order == 2, select = -dom_order)
tadsL3 = subset(hiertads_gmap, dom_order == 3, select = -dom_order)
## plot tads_gmap (select region)
xy_gmap = triangle_tad(tads_gmap, resl = resl)
if(nrow(tadsL2) > 0 )xy_tadsL2 = triangle_tad(tadsL2, resl = resl)
if(nrow(tadsL3) > 0 ) xy_tadsL3 = triangle_tad(tadsL3, resl = resl)
## plot it horizontally
hxy_gmap = transf_tad_horz(xy_gmap)
if(nrow(tadsL2) > 0 ) hxy_tadsL2 = transf_tad_horz(xy_tadsL2)
if(nrow(tadsL3) > 0 )hxy_tadsL3 = transf_tad_horz(xy_tadsL3)
dat = data.frame(hic_obj)
pdat = subset(dat, n1 <= end_bin & n1 >= start_bin & n2 <= end_bin & n2 >= start_bin)
pdat$count = ifelse(pdat$count > cthr, cthr, pdat$count)
orgPlot <- ggplot(data = pdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high='red', low = 'white') + xlim(min(pdat$n1), max(pdat$n1))
#orgPlot
## plot it in horizontal triangle
hdat = pdat[pdat$n1 <= pdat$n2, ]
hdat[, 1:2] = transf_tad_horz(as.matrix(hdat[, 1:2]))
hdat = hdat[hdat$n2 <= 100, ]
cols = colorRampPalette(c("white", "red"))(2)
ss = ifelse(resl == 1, 1, 10^6/resl)  ## plot in scale of mb
xlab0 = ifelse(resl == 1, 'bin', 'Mb')
#hdat$n1 = (hdat$n1 - as.numeric(as.vector(hic_obj[1, 1])) + 1)/ss
hdat$n1 = (hdat$n1)/ss
orgPlot <- ggplot(data = hdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high = 'red', low = 'white') + xlim(min(hdat$n1), max(hdat$n1)) +
xlab(xlab0) + ylab("") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
legend.position = 'none') + theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank())
#orgPlot
orgWTad_horz <- function(xy, m = start_bin - as.numeric(as.vector(hic_obj[1, 1])) + 1
, M = end_bin - as.numeric(as.vector(hic_obj[1, 1])) + 1){
ind1 = which(xy[, 1]>= m & xy[, 1]<= M)
if(length(ind1) <= 1) return(NULL)
xy = xy[ind1, ]
df = data.frame('xs' = xy[1:(nrow(xy)-1), 1]/ss,
'ys' = xy[1:(nrow(xy)-1), 2],
"xe" = xy[2:nrow(xy), 1]/ss,
"ye" = xy[2:nrow(xy), 2])
return(df)
}
p1 = p2 = p3 = orgPlot
if(!is.null(orgWTad_horz(hxy_gmap))) {
tdat = orgWTad_horz(hxy_gmap)
tdat = tdat[order(tdat$xs), ]
tdat = tdat[tdat$xs <= tdat$xe,]
p1 <- p1 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = tdat, color = 'black')
p2 = p1
}
if(nrow(tadsL2) > 0 ){
if(!is.null(orgWTad_horz(hxy_tadsL2))){
p2 = p2 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = orgWTad_horz(hxy_tadsL2), color = 'black')
p3 = p2
}
}
if(nrow(tadsL3) > 0 ){
if(!is.null(orgWTad_horz(hxy_tadsL3))) {
p3 = p2 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = orgWTad_horz(hxy_tadsL3), color = 'black')
}
}
return(list('p1' = p1, 'p2' = p2, 'p3' = p3))
}
plotdom = cmpfun(plotdom)
pp = plotdom(hic_obj = hic_rao_IMR90_chr15, NULL, res$hierTads, NULL, 5950, 6900, 30 ,10000)
transf_tad_horz <- function(triangle_tad){
xy_tad = as.matrix(triangle_tad)
transf_mat = matrix(c(1, -1, 1, 1), 2, 2)/2
#transf_mat = matrix(c(1, -1, 1, 1), 2, 2)/sqrt(2)
xy_new =  transf_mat %*% t(xy_tad)
return(t(xy_new))
}
## reformat n by n hic_mat into (x, y, count) format
refm_hic <- function(hic_mat){
n = nrow(hic_mat)
dat = NULL
tfun <- function(x, mat){
lx = n - x + 1
xx = rep(x, lx)
tt = cbind(xx, x:n, mat[x, x:n])
}
temp = lapply(1:n, tfun, hic_mat)
refm_mat = do.call('rbind', temp)
colnames(refm_mat) = c('x', 'y', 'count')
return(refm_mat)
}
refm_hic = cmpfun(refm_hic)
triangle_tad <- function(tads, resl = 1){
pos <- within(tads, {
y <- end/resl
x <- start/resl
rm(start, end)
})
# to plot a tad in a triangle shape
triangle_tran <- function(x){
yy = matrix(0, 3, 2)
yy[1, ] = c(x[1], x[1])
yy[2, ] = c(x[1], x[2])
yy[3, ] = c(x[2], x[2])
return(yy)
}
xy = NULL
pos = as.matrix(pos)
for(i in 1:nrow(pos)){
xy = rbind(xy, triangle_tran(pos[i, ]))
}
return(xy)
}
pp = plotdom(hic_obj = hic_rao_IMR90_chr15, NULL, res$hierTads, NULL, 5950, 6900, 30 ,10000)
pp$p1
pp = plotdom(hic_obj = hic_rao_IMR90_chr15, NULL, res$hierTads, NULL, 5900, 6900, 30 ,10000)
pp$p2
plotdom <- function(hic_dat, hiertads_gmap, start_bin, end_bin, cthr = 20, resl = 10000){
if(dim(hic_dat)[1] == dim(hic_dat)[2]) hic_dat = data.table(refm_hic(hic_dat))
if (ncol(hiertads_gmap) == 4) #if TADs called from multiple chromosomes, assuming the first col should be chr, cut it.
hiertads_gmap = hiertads_gmap[,-1]
names(hiertads_gmap) = c('start', 'end', 'dom_order')
names(hic_dat) = c('n1', 'n2', 'count')
tads_gmap = subset(hiertads_gmap, dom_order == 1, select = -dom_order)
tadsL2 = subset(hiertads_gmap, dom_order == 2, select = -dom_order)
tadsL3 = subset(hiertads_gmap, dom_order == 3, select = -dom_order)
## plot tads_gmap (select region)
xy_gmap = triangle_tad(tads_gmap, resl = resl)
if(nrow(tadsL2) > 0 )xy_tadsL2 = triangle_tad(tadsL2, resl = resl)
if(nrow(tadsL3) > 0 ) xy_tadsL3 = triangle_tad(tadsL3, resl = resl)
## plot it horizontally
hxy_gmap = transf_tad_horz(xy_gmap)
if(nrow(tadsL2) > 0 ) hxy_tadsL2 = transf_tad_horz(xy_tadsL2)
if(nrow(tadsL3) > 0 )hxy_tadsL3 = transf_tad_horz(xy_tadsL3)
mm = start_bin
MM = end_bin
dat = data.frame(hic_dat)
pdat = subset(dat, n1<=MM & n1 >= mm & n2 <= MM & n2 >= mm)
pdat$count = ifelse(pdat$count >cthr, cthr, pdat$count)
orgPlot <- ggplot(data = pdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high='red', low = 'white') + xlim(min(pdat$n1), max(pdat$n1))
#orgPlot
## plot it in horizontal triangle
hdat = pdat[pdat$n1 <= pdat$n2, ]
hdat[, 1:2] = transf_tad_horz(as.matrix(hdat[, 1:2]))
hdat = hdat[hdat$n2 <= 100, ]
#hdat$count = ifelse(hdat$count > 30, 30, hdat$count)
cols = colorRampPalette(c("white", "red"))(2)
ss = ifelse(resl == 1, 1, 10^6/resl)  ## plot in scale of mb
xlab0 = ifelse(resl == 1, 'bin', 'Mb')
#hdat$n1 = (hdat$n1 - as.numeric(as.vector(hic_dat[1, 1])) + 1)/ss
hdat$n1 = hdat$n1/ss
orgPlot <- ggplot(data = hdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high = 'red', low = 'white') + xlim(min(hdat$n1), max(hdat$n1)) +
xlab(xlab0) + ylab("") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
legend.position = 'none') + theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank())
#orgPlot
orgWTad_horz <- function(xy, m = mm - as.numeric(as.vector(hic_dat[1, 1])) + 1
, M = MM - as.numeric(as.vector(hic_dat[1, 1])) + 1){
ind1 = which(xy[, 1]>= m & xy[, 1]<= M)
if(length(ind1) <= 1) return(NULL)
xy = xy[ind1, ]
df = data.frame('xs' = xy[1:(nrow(xy)-1), 1]/ss,
'ys' = xy[1:(nrow(xy)-1), 2],
"xe" = xy[2:nrow(xy), 1]/ss,
"ye" = xy[2:nrow(xy), 2])
return(df)
}
p1 = p2 = p3 = orgPlot
if(!is.null(orgWTad_horz(hxy_gmap))) {
tdat = orgWTad_horz(hxy_gmap)
tdat = tdat[order(tdat$xs), ]
tdat = tdat[tdat$xs <= tdat$xe,]
p1 <- p1 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = tdat, color = 'black')
p2 = p1
}
if(nrow(tadsL2) > 0 ){
if(!is.null(orgWTad_horz(hxy_tadsL2))){
p2 = p2 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = orgWTad_horz(hxy_tadsL2), color = 'black')
p3 = p2
}
}
if(nrow(tadsL3) > 0 ){
if(!is.null(orgWTad_horz(hxy_tadsL3))) {
p3 = p2 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = orgWTad_horz(hxy_tadsL3), color = 'black')
}
}
return(list('p1' = p1, 'p2' = p2, 'p3' = p3))
}
plotdom = cmpfun(plotdom)
pp = plotdom(hic_rao_IMR90_chr15, res$hierTads, 5950, 6900, 30, 10000)
pp$p2
res$hierTads
res$hierTads[start<=69000000 & start>59000000]
plotdom <- function(hic_obj, index_obj = NULL, hiertads_gmap, chr0 = NULL, start_bin, end_bin, cthr = 20, resl = 10000){
if(class(hic_obj)[1] == 'character') {
message('Read hic_obj...')
hic_file = hic_obj
hic_obj = fread(hic_file)
if(ncol(hic_obj) != 3 & nrow(hic_obj) != ncol(hic_obj)) hic_obj = data.table(read.table(hic_file, header = F))
if(ncol(hic_obj) != 3 & nrow(hic_obj) != ncol(hic_obj)) stop('Wrong dimension of data!')
}
# transfer the n by n matrix to 3-column data table
if(dim(hic_obj)[1] == dim(hic_obj)[2]) hic_obj = data.table(refm_hic(hic_obj))
if(!any(class(hic_obj) == 'data.table')) hic_obj = data.table(hic_obj)
if (ncol(hiertads_gmap) == 4) #if TADs called from multiple chromosomes, assuming the first col should be chr, cut it.
{
if(is.null(chr0)) stop('should provided a selected chromosome')
hiertads_gmap = hiertads_gmap[chr == chr0]
hiertads_gmap = hiertads_gmap[, -1]
}
if(!is.null(index_obj) & class(index_obj)[1] == 'character'){
index_obj = fread(index_obj, select = 1:4)
names(index_obj) = c('chr', 'start', 'end', 'id')
}
names(hiertads_gmap) = c('start', 'end', 'dom_order')
names(hic_obj) = c('n1', 'n2', 'count')
if(!is.null(index_obj)){
index_obj = index_obj[chr == chr0]
id0 = min(index_obj$id)
hic_obj = hic_obj[n1 %in% index_obj$id & n2 %in% index_obj$id]
hic_obj[, 'n1' := n1 - id0 + 1]
hic_obj[, 'n2' := n2 - id0 + 1]
}
tads_gmap = subset(hiertads_gmap, dom_order == 1, select = -dom_order)
tadsL2 = subset(hiertads_gmap, dom_order == 2, select = -dom_order)
tadsL3 = subset(hiertads_gmap, dom_order == 3, select = -dom_order)
## plot tads_gmap (select region)
xy_gmap = triangle_tad(tads_gmap, resl = resl)
if(nrow(tadsL2) > 0 )xy_tadsL2 = triangle_tad(tadsL2, resl = resl)
if(nrow(tadsL3) > 0 ) xy_tadsL3 = triangle_tad(tadsL3, resl = resl)
## plot it horizontally
hxy_gmap = transf_tad_horz(xy_gmap)
if(nrow(tadsL2) > 0 ) hxy_tadsL2 = transf_tad_horz(xy_tadsL2)
if(nrow(tadsL3) > 0 )hxy_tadsL3 = transf_tad_horz(xy_tadsL3)
dat = data.frame(hic_obj)
pdat = subset(dat, n1 <= end_bin & n1 >= start_bin & n2 <= end_bin & n2 >= start_bin)
pdat$count = ifelse(pdat$count > cthr, cthr, pdat$count)
orgPlot <- ggplot(data = pdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high='red', low = 'white') + xlim(min(pdat$n1), max(pdat$n1))
#orgPlot
## plot it in horizontal triangle
hdat = pdat[pdat$n1 <= pdat$n2, ]
hdat[, 1:2] = transf_tad_horz(as.matrix(hdat[, 1:2]))
hdat = hdat[hdat$n2 <= 100, ]
cols = colorRampPalette(c("white", "red"))(2)
ss = ifelse(resl == 1, 1, 10^6/resl)  ## plot in scale of mb
xlab0 = ifelse(resl == 1, 'bin', 'Mb')
#hdat$n1 = (hdat$n1 - as.numeric(as.vector(hic_obj[1, 1])) + 1)/ss
hdat$n1 = (hdat$n1)/ss
orgPlot <- ggplot(data = hdat, aes(n1, n2)) + geom_point(aes(colour = count)) +
scale_colour_gradient(high = 'red', low = 'white') + xlim(min(hdat$n1), max(hdat$n1)) +
xlab(xlab0) + ylab("") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
legend.position = 'none') + theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank())
#orgPlot
orgWTad_horz <- function(xy, m = start_bin
, M = end_bin ){
ind1 = which(xy[, 1]>= m & xy[, 1]<= M)
if(length(ind1) <= 1) return(NULL)
xy = xy[ind1, ]
df = data.frame('xs' = xy[1:(nrow(xy)-1), 1]/ss,
'ys' = xy[1:(nrow(xy)-1), 2],
"xe" = xy[2:nrow(xy), 1]/ss,
"ye" = xy[2:nrow(xy), 2])
return(df)
}
p1 = p2 = p3 = orgPlot
if(!is.null(orgWTad_horz(hxy_gmap))) {
tdat = orgWTad_horz(hxy_gmap)
tdat = tdat[order(tdat$xs), ]
tdat = tdat[tdat$xs <= tdat$xe,]
p1 <- p1 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = tdat, color = 'black')
p2 = p1
}
if(nrow(tadsL2) > 0 ){
if(!is.null(orgWTad_horz(hxy_tadsL2))){
p2 = p2 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = orgWTad_horz(hxy_tadsL2), color = 'black')
p3 = p2
}
}
if(nrow(tadsL3) > 0 ){
if(!is.null(orgWTad_horz(hxy_tadsL3))) {
p3 = p2 + geom_segment(aes(x = xs, y = ys, xend = xe, yend = ye), size = 0.7,
data = orgWTad_horz(hxy_tadsL3), color = 'black')
}
}
return(list('p1' = p1, 'p2' = p2, 'p3' = p3))
}
plotdom = cmpfun(plotdom)
pp = plotdom(hic_obj = hic_rao_IMR90_chr15, NULL, res$hierTads, NULL, 5900, 6900, 30 ,10000)
pp$p2
library(rGMAP)
help(rGMAP)
res = rGMAP(hic_rao_IMR90_chr15, NULL, 10000)
pp = plotdom(hic_obj = hic_rao_IMR90_chr15, NULL, res$hierTads, NULL, 5900, 6900, 30 ,10000)
pp$p2
help(rGMAP)
remove.packages('rGMAP')
